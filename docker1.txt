NOTE: Do not forget to see manual page using "--help" option in command when searching for options/commands for a particular task.

1. Install Docker, either on your native OS or on a VM. Make sure it runs. Type "docker -v" to check if it's installed.

If you can't install or configure Docker, you can use the online docker setup to do the assignment.
Step1 Goto:- https://www.katacoda.com/courses/kubernetes/playground
Step2 Click on "continue" button on the left panel
Step3 Click on "launch.sh" button on the left panel
Step4 From the right panel use the top console to execute below command:-
		docker -v

Docker version 19.03.6,build 369ce74a3c

Try below commands for help
	docker --help  ---> This command shows all available options and commands to work with images and containers
	docker image --help ---> This command shows all the avaialble options and commands to work with docker images
	docker container --help ---> This command shows all the avaialble options and commands to work with docker containers

NOTE:- DO NOT TRY TO USE INTERNET TO SOLVE ASSIGNMENT, BETTER USE THE ABOVE --help OPTION TO SEE THE MANUAL OF ANY PARTICULAR COMMAND AND FIGURE OUT THE SOLUTIONS ON YOUR OWN.

2. Find a image from dockerhub of your choice(recommeded: nginx), don't use browser, pull the official image from dockerhub

docker pull nginx

3. List all the available images in your machine/vm, make sure you see recently pulled image in the list.

docker images

4. Find out the "Full" ImageId of the image that you pulled and write it below.

docker inspect fa5269854a5e

5. Create a container of your image 

docker run -it -d nginx

6. List all the running containers

docker ps

7. List all the running and stopped containers

docker ps -a

8. Find out the "Full" containerId of the container and write it below.

docker inspect 15beda4729b6

9. Find out how many image layers are used to build this image.

docker history fa5269854a5e(imageid of nginx)
docker history nginx

10. Get the Apache Tomcat 7 server image from the docker hub.

docker pull tomcat

11. Run the Apache Tomcat 7, I mean create a container of Apache Tomcat.


docker run -it -p 8080:8080 -p 50000:50000 tomcat:7.0

12. Find out what is the IP Address of the Apache Tomcat Container that it is running on

env

ssh_client=172.17.0.21

13. Which Port it is using?

8080

14. Try to access the Tomcat's home page from your machine/vm.

curl localhost:8080


15. What is the disk size of Apache Tomcat image?

docker images
533MB

16. Find out list of all environment variables that is configured for tomcat image, 
can you see JAVA_HOME and CATALINA_HOME? What did you notice about it?

docker exec cbf34ab3cd3(container id of tomcat) printenv
JAVA_HOME=/usr/local/openjdk-11
JAVA VERSION=11.0.14.1

CATALINA_HOME=/usr/local/tomcat



17. Find out which port is exposed for tomcat?

docker inspect tomcat

host port: 8080 and 
container port : 50000

18. Print tomcat version?

TOMCAT_VERSION=10.0.20 

19. Pull ubuntu os from dockerhub, try to pull 2 images of ubuntu, Except the latest one.

docker pull ubuntu:rolling
docker pull ubuntu:jammy


20. Run the container of ubuntu in attached mode.

docker run --name dem -it ubuntu:rolling
docker start dem
docker attach dem

21. Run the container of another ubuntu in detached mode.


docker run -d --name test_ubuntu -p 6379:6379 ubuntu:jammy


22. Check how many ubuntu containers are running and stopped
docker ps
docker ps -a


23. Is the tomcat container running? If no, start one.

docker run -d -it tomcat

24. Check the logs, generated by tomcat container(don't forget to make request to tomcat's home page to see the log).

docker logs 252d479f7cd0(container id of tomcat)

25. Check if ubuntu conatiner is running? If no, start one in attached mode to the terminal.

docker run -it ubuntu

26. Login as root user in ubuntu container
27. Create a file with any name in root directory

  touch sagar

28. Install software of your choice in ubuntu container using "apt-get install"

apt-get install debian

29. Now exit the ubuntu shell, are you back to your host machine, if not, come back to the host machine.
exit
30. Check if the ubuntu container is running.

no

31. Create a new ubuntu container out of the same image as that previous container in attached mode.

docker run -it ubuntu

32. Login as a root user
33. Check if you can see the file created in previous container, you will not see the file as well as software that you installed in the previous container. Now kill this Container.

docker kill ee85481ae68c

34. Do you have the previous ubuntu container where you created the file and installed the software? If no reapeat step 25 to 29.

yes

35. Create an Image out of the existing container.

docker commit eldfb55f8ffb smartysd/demo:1.0

36. Now Create a Container out of this image and login into it to see if you can see the file and software installed by you in the previous container.
no
37. Do you have running tomcat container? If yes, Stop it and kill all tomcat container.
docker kill 252d479f7cd0
38. Create an index.html file with following code in it:-
	<h1>This is Tomcat Container</h1>
Now, Start a tomcat container in such a way that on hitting its URL for home page it should show the above html page.

cat Dockerfile
FROM tomcat:8.0-alpine

LABEL maintainer=”deepak@softwareyoga.com”

ADD index.html /usr/local/tomcat/webapps/

EXPOSE 8080

CMD [“catalina.sh”, “run”]

docker build -t mywebapp .

docker run -p 80:8080 mywebapp

http://localhost

39. type below command:-
	docker images --help
Now, try to run command that proves the concept of following three options:-
1. -a
2. -f
3. -q

write atleast 1 command using each option above and prove their concepts as described in the --help.


docker images -a    : show all iamges
used to show default hides intermediate images

docker images -f    :filter output based on condition provided
used to filter(based on size,time etc)

docker images -q    :only show image id
used when we need only image id

40. type below command:-
	docker ps --help
Now, try to run command that proves the concept of following six options:-
1. -a
2. -f
3. -q
4. -n
5. -l
6. -s

docker ps -a 
used to show all containers(running and non running)

docker ps -f
used to filter result based on condiion

docker ps -q
used to show only container id

docker ps -n
used to show last n created containers(include all states)

docker ps -l
used to show latest created containers(incluse all states)

docker ps -s
used to show total file sizes
